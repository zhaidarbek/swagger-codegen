/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.IO;
using $modelPackageName$;
using SwaggerRuntime.Attributes;
using SwaggerRuntime.Common;
using SwaggerRuntime.Exceptions;

$imports:{ import |
import $import$;
}$

namespace $packageName$
{
  /// <remarks>
  /// NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
  /// </remarks>
  public class $resource$ : $extends$
  {
    public $resource$(string apiBaseUrl, ISecurityHandler securityHandler)
      : base(apiBaseUrl, securityHandler)
    {
    }
  
  $methods:{ method |
     /// <summary>
     /// $method.title; format="xml-safe"$
  $if(method.description)$
     /// $method.description; format="xml-safe"$
  $endif$</summary>
  $method.arguments:{ argument |    /// <param name="$argument.name; format="xml-safe"$">
   /// $argument.description; format="xml-safe"$
  $if(argument.allowedValues)$
   /// Allowed values are - $argument.allowedValues; format="xml-safe"$
  $endif$
   /// </param> }$
  $if(!method.responseVoid)$
     /// <returns>
     /// <see cref="$method.returnClassName; format="xml-safe"$">$method.returnValue; format="xml-safe"$</see>
     /// </returns>
  $endif$
     /// <exception cref="ApiException">$method.exceptionDescription; format="xml-safe"$</exception>
  $if(method.hasArguments)$
     [MethodArgumentNames(Value = "$method.argumentNames; separator=", "$")]
  $endif$
     public $method.returnValue$ $method.name$($method.argumentDefinitions; separator=", "$)
     {
      // parse inputs
      string resourcePath = "$method.resourcePath$";
      
      resourcePath = resourcePath.Replace("{format}","json");
      
      string method = "$method.methodType$";
      
      var queryParams = new Dictionary<string, string>();
      var headerParams = new Dictionary<string, string>();
      
  $if(!method.inputModel)$
  $method.queryParameters:{ argument |
      if( $argument.name$ != null) {
        queryParams.Add("$argument.name$", ToPathValue($argument.name$));
      }
  }$
  $method.pathParameters:{ argument |
    if ($argument.name$ != null)
    {
      resourcePath = resourcePath.Replace("{$argument.name$}", ToPathValue($argument.name$));
    }
    else 
    {
      resourcePath = resourcePath.Replace("{$argument.name$}", "");
    }
  }$
  $method.headerParameters:{ argument |
      if ($argument.name$ != null)
      {
        headerParams.Add("$argument.name$", ToPathValue($argument.name$));
      }
  }$
  
  $endif$   
  $if(method.inputModel)$   
  $method.queryParameters:{ argument |
    if ($argument.inputModelClassArgument$ != null && $argument.methodNameFromModelClass$ != null)
    {
      queryParams.Add("$argument.name$", ToPathValue($argument.methodNameFromModelClass$));
    }
  }$
  $method.pathParameters:{ argument |
    if ($argument.inputModelClassArgument$ != null && $argument.methodNameFromModelClass$ != null)
    {
      resourcePath = resourcePath.Replace("{$argument.name$}", ToPathValue($argument.methodNameFromModelClass$));
    }
    else 
    {
      resourcePath = resourcePath.Replace("{$argument.name$}", "");
    }
  }$
  $method.headerParameters:{ argument |
    if ($argument.inputModelClassArgument$ != null && $argument.methodNameFromModelClass$ != null)
    {
      headerParams.Add("$argument.name$", ToPathValue($argument.methodNameFromModelClass$));
    }
  }$
  $endif$ 
      // make the API Call
  $if(method.postObject)$      $if(!method.responseVoid)$string response = $endif$InvokeApi(resourcePath, method, queryParams, postData, headerParams);$endif$
  $if(!method.postObject)$      $if(!method.responseVoid)$string response = $endif$InvokeApi(resourcePath, method, queryParams, null, headerParams);$endif$
  
  $if(!method.responseVoid)$
      if (string.IsNullOrEmpty(response))
      {
        return null;
      }
  $if(!method.returnValueList)$
      // create output objects if the response has more than one object
      $method.returnValue$ responseObject = Deserialize<$method.returnClassName$>(response);
      
      return responseObject;
  $endif$   
  $if(method.returnValueList)$
      return Deserialize<List<$method.returnClassName$>>(response);
  $endif$
  $endif$
    }
  }$
  }
}
