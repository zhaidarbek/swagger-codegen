    /**
     * NOTE: This class is auto generated by the drive code generator program so please do not edit the class manually.
     */
    var $resource$ = new function() {

$methods:{ method |
        this.event_$method.name$ = "$resource$.$method.name$";$\r$}$

//		/**
//		 * Constructor for the $resource$ api client
//		 * @param apiCredentials Wrapper object for tokens and hostName required towards authentication
//		 * @param eventDispatcher Optional event dispatcher that when provided is used by the SDK to dispatch any Response
//		 */
//		public function $resource$(apiCredentials: ApiUserCredentials, eventDispatcher: EventDispatcher = null) {
//			super(apiCredentials, eventDispatcher);
//		}


$methods:{ method |
        /**
         * $method.description$
$method.arguments:{ argument |
         * @param $argument.name$  $argument.description$
    $if(argument.allowedValues)$
         *        Allowed values are - $argument.allowedValues$
    $endif$}$
         *
$if(!method.responseVoid)$
         * @return $method.returnValue$ {@link $method.returnClassName$} $endif$
         * $if(method.hasArguments)$ $length(method.argumentNames)$ $endif$
         */

    $if(method.hasArguments)$
        this.$method.name$ = function($method.argumentNames; separator=", "$, callback)
    $else$
        this.$method.name$ = function(callback)
        $endif$ {

$if(method.authToken)$
            if(authToken == null || authToken.length == 0) {
                throw new Error(ApiErrorCodes.AUTH_TOKEN_NOT_VALID);
            }$endif$
            var requestId = ApiInvoker.guid();
            //parse inputs
            var resourcePath = "$method.resourcePath$";
            resourcePath = resourcePath.replace("{format}","json");
            resourcePath = resourcePath.replace(/\*/g, "");
            var method = "$method.methodType$";
            var queryParams = new Object();
$if(!method.inputModel)$
$method.queryParameters:{ argument |
            if( $argument.name$ != null) {
                queryParams["$argument.name$"] = encodeURIComponent(ApiInvoker.toPathValue($argument.name$));
            }
}$
$method.pathParameters:{ argument |
            if( $argument.name$ != null) {
                resourcePath = resourcePath.replace("{$argument.name$}", encodeURIComponent($argument.name$));
            }
}$
$endif$
$if(method.inputModel)$
$method.queryParameters:{ argument |
            if( $argument.inputModelClassArgument$ != null && $argument.methodNameFromModelClass$ != null) {
                queryParams["$argument.name$"] = encodeURIComponent($argument.methodNameFromModelClass$);
            }
}$
$method.pathParameters:{ argument |
            if( $argument.inputModelClassArgument$ != null && $argument.methodNameFromModelClass$ != null) {
                resourcePath = resourcePath.replace("{$argument.name$}", encodeURIComponent($argument.methodNameFromModelClass$));
            }
}$
$endif$
            //make the API Call
            var eventName = "$resource$.$method.name$";
            var returnType = null;
$if(!method.responseVoid)$
            returnType = $method.returnClassName$;
$endif$
            var ajaxRequest = null;
$if(method.postObject)$
$if(method.authToken)$
            ajaxRequest = ApiInvoker.invokeAPI(authToken, resourcePath, method, queryParams, postData, eventName, requestId, returnType, callback);
$endif$
$if(!method.authToken)$
            ajaxRequest = ApiInvoker.invokeAPI(null, resourcePath, method, queryParams, postData, eventName, requestId, returnType, callback);
$endif$
$endif$

$if(!method.postObject)$
$if(method.authToken)$
            ajaxRequest = ApiInvoker.invokeAPI(authToken, resourcePath, method, queryParams, null, eventName, requestId, returnType, callback);
$endif$
$if(!method.authToken)$
            ajaxRequest = ApiInvoker.invokeAPI(null, resourcePath, method, queryParams, null, eventName, requestId, returnType, callback);
$endif$
$endif$

            return {"requestId":requestId, "ajaxRequest":ajaxRequest};
        }
}$
    }
